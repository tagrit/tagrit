<?php
defined('BASEPATH') or exit('No direct script access allowed');

require_once(APP_MODULES_PATH.'/pesapal/libraries/OAuth.php');

class Pesapal extends App_Controller
{
  public function make_payment($invoiceid, $hash)
  {
    check_invoice_restrictions($invoiceid, $hash);

    $this->load->model('invoices_model');
    $invoice = $this->invoices_model->get($invoiceid);

    load_client_language($invoice->clientid);

    $data['invoice'] = $invoice;
    $data['total']   = $this->session->userdata('pesapal_total');

      //pesapal params

    $token = $params = NULL;

    $consumer_key    = $this->pesapal_gateway->getSetting('test_mode_enabled') == '1' ? $this->pesapal_gateway->getSetting('consumer_key_demo') : $this->pesapal_gateway->getSetting('consumer_key');
    $consumer_secret     = $this->pesapal_gateway->getSetting('test_mode_enabled') == '1' ? $this->pesapal_gateway->getSetting('consumer_secret_demo') : $this->pesapal_gateway->getSetting('consumer_secret');
    $currency     = $this->pesapal_gateway->getSetting('currencies');

    $signature_method = new OAuthSignatureMethod_HMAC_SHA1();
    $iframelink = $this->pesapal_gateway->get_action_url().'PostPesapalDirectOrderV4';
    $contact = null;
      if (is_client_logged_in()) {
        $contact = $this->clients_model->get_contact(get_contact_user_id());
      } else {
        if (total_rows(db_prefix().'contacts', ['userid' => $invoice->clientid]) > 0) {
          $contact = $this->clients_model->get_contact(get_primary_contact_user_id($invoice->clientid));
        }
      }

      if (isset($contact) && $contact) {
        $data['firstname']   = $contact->firstname;
        $data['lastname']    = $contact->lastname;
        $data['email']       = $contact->email;
        $data['phonenumber'] = $contact->phonenumber;
      }



        // there is post request
    if (!empty($invoice)) {
            $amount = $data['total'];
            $amount = number_format($amount, 2); //format amount to 2 decimal places

            $desc = 'Payment for Invoice: #'.format_invoice_number($invoice->id);
            $type     = $this->pesapal_gateway->getSetting('type');
            $reference = $this->pesapal_gateway->gen_transaction_id();//unique order id of the transaction, generated by merchant
            $first_name = $data['firstname'];
            $last_name = $data['lastname'];
            $email = $data['email'];
            $phonenumber = $data['phonenumber'];//ONE of email or phonenumber is required

            $callback_url = site_url('pesapal/success/'.$invoice->id.'/'.$invoice->hash); //redirect url, the page that will handle the response from pesapal.

            $post_xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?><PesapalDirectOrderInfo xmlns:xsi=\"http://www.w3.org/2001/XMLSchemainstance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Amount=\"".$amount."\" Description=\"".$desc."\" Type=\"".$type."\" Reference=\"".$reference."\" FirstName=\"".$first_name."\" LastName=\"".$last_name."\" Email=\"".$email."\" PhoneNumber=\"".$phonenumber."\" Currency=\"".$currency."\" xmlns=\"http://www.pesapal.com\" />";
            $post_xml = htmlentities($post_xml);

            $consumer = new OAuthConsumer($consumer_key, $consumer_secret);

            //post transaction to pesapal
            $iframe_src = OAuthRequest::from_consumer_and_token($consumer, $token, "GET", $iframelink, $params);
            $iframe_src->set_parameter("oauth_callback", $callback_url);
            $iframe_src->set_parameter("pesapal_request_data", $post_xml);
            $iframe_src->sign_request($signature_method, $consumer, $token);

            $data['iframe_src'] = $iframe_src;
          }
          //echo $post_xml; exit;
           //echo '<pre>'.json_encode($data); exit;
          echo $this->get_html($data);
        }

        public function get_html($data)
        { 
               ob_start(); ?>
               <?php echo payment_gateway_head(_l('payment_for_invoice') . ' ' . format_invoice_number($data['invoice']->id)); ?>
               <body class="gateway-pesapal">
                 <div class="container">
                  <div class="col-md-8 col-md-offset-2 mtop30">
                   <div class="mbot30 text-center">
                    <?php echo payment_gateway_logo(); ?>
                  </div>
                  <div class="row">
                    <div class="panel_s">
                     <div class="panel-body">
                      <h3 class="no-margin">
                       <b><?php echo _l('payment_for_invoice'); ?> </b>
                       <a href="<?php echo site_url('invoice/' . $data['invoice']->id . '/' . $data['invoice']->hash); ?>">
                         <b><?php echo format_invoice_number($data['invoice']->id); ?></b>
                       </a>
                     </h3>
                     <h4><?php echo _l('payment_total', app_format_money($data['total'], $data['invoice']->currency_name)); ?></h4>
                     <hr />
                     <?php if(!empty($data['iframe_src'])){ ?>
                      <iframe src="<?php echo $data['iframe_src']; ?>" width="100%" height="700px"  scrolling="no" frameBorder="0">
                        <p>Browser unable to load iFrame</p>
                      </iframe>
                    <?php } else{ ?>
                     <div class="alert alert-warning">Sorry, an error occurred while processing your request. We are working to fix it as soon as we can.</div>
                     <?php ?>
                   </div>
                 </div>
                   </div>
                 </div>
               </div>
               <?php echo payment_gateway_scripts(); ?>
               <?php echo payment_gateway_footer(); ?>
               <?php
               $contents = ob_get_contents();
               ob_end_clean();

               return $contents;
        }
      }

   public function ipn()
   {
        $consumer_key    = $this->pesapal_gateway->getSetting('test_mode_enabled') == '1' ? $this->pesapal_gateway->getSetting('consumer_key_demo') : $this->pesapal_gateway->getSetting('consumer_key');
        $consumer_secret     = $this->pesapal_gateway->getSetting('test_mode_enabled') == '1' ? $this->pesapal_gateway->getSetting('consumer_secret_demo') : $this->pesapal_gateway->getSetting('consumer_secret');
        $statusrequestAPI = $this->pesapal_gateway->get_action_url().'QueryPaymentDetails';

            // Parameters sent to you by PesaPal IPN
        $pesapalNotification = $this->input->get('pesapal_notification_type', TRUE);
        $pesapalTrackingId = $this->input->get('pesapal_transaction_tracking_id', TRUE);
        $pesapal_merchant_reference = $this->input->get('pesapal_merchant_reference', TRUE);
        $pesapal_payment_method = $this->input->get('payment_method', TRUE);

        if($pesapalNotification=="CHANGE" && $pesapalTrackingId!='')
        {
         $token = $params = NULL;
         $consumer = new OAuthConsumer($consumer_key, $consumer_secret);
         $signature_method = new OAuthSignatureMethod_HMAC_SHA1();

               //get transaction status
         $request_status = OAuthRequest::from_consumer_and_token($consumer, $token, "GET", $statusrequestAPI, $params);
         $request_status->set_parameter("pesapal_merchant_reference", $pesapal_merchant_reference);
         $request_status->set_parameter("pesapal_transaction_tracking_id",$pesapalTrackingId);
         $request_status->sign_request($signature_method, $consumer, $token);

         $ch = curl_init();
         curl_setopt($ch, CURLOPT_URL, $request_status);
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
         curl_setopt($ch, CURLOPT_HEADER, 1);
         curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
         if(defined('CURL_PROXY_REQUIRED')) if (CURL_PROXY_REQUIRED == 'True')
         {
          $proxy_tunnel_flag = (defined('CURL_PROXY_TUNNEL_FLAG') && strtoupper(CURL_PROXY_TUNNEL_FLAG) == 'FALSE') ? false : true;
          curl_setopt ($ch, CURLOPT_HTTPPROXYTUNNEL, $proxy_tunnel_flag);
          curl_setopt ($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
          curl_setopt ($ch, CURLOPT_PROXY, CURL_PROXY_SERVER_DETAILS);
        }

        $response = curl_exec($ch);

        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
        $raw_header  = substr($response, 0, $header_size - 4);
        $headerArray = explode("\r\n\r\n", $raw_header);
        $header      = $headerArray[count($headerArray) - 1];

               //transaction status
        $elements = preg_split("/=/",substr($response, $header_size));
        $status = $elements[1];

        curl_close ($ch);

               //UPDATE YOUR DB TABLE WITH NEW STATUS FOR TRANSACTION WITH pesapal_transaction_tracking_id $pesapalTrackingId
          

      //Update
      $payment_updates = array(
        'tracking_id' => $pesapalTrackingId,
        'txn_ipn_date' => date('Y-m-d, H:i:s'),
        'notification_type' => $status,
        'txn_status' =>'PAID',
        'flag' =>1
      );

      $this->db->where('reference_code', $pesapal_merchant_reference);
      $this->db->update(db_prefix() . 'pesapal_txn', $payment_updates);

      //$result = $resp.' | '.$status;

      if($this->db->affected_rows() > 0 && $status != "PENDING")
      {
        $pesapal_txn = $this->pesapal_gateway->get_field_value(db_prefix() . 'pesapal_txn', $where=array('reference_code' => $pesapal_merchant_reference));

        $this->load->model('invoices_model');
        $invoice = $this->invoices_model->get( $pesapal_txn->invoiceid);
        load_client_language($invoice->clientid);
        
        $this->pesapal_gateway->addPayment(
          [
            'amount'        => $pesapal_txn->amount,
            'invoiceid'     => $pesapal_txn->invoiceid,
            'transactionid' => $pesapal_txn->reference_code,
            'paymentmethod' => $pesapal_payment_method,
          ]
        );


        $resp="pesapal_notification_type=$pesapalNotification&pesapal_transaction_tracking_id=$pesapalTrackingId&pesapal_merchant_reference=$pesapal_merchant_reference";
        ob_start();
        echo $resp;
        ob_flush();
        exit;
      }
    }
}

public function success($invoiceid, $hash)
{

  check_invoice_restrictions($invoiceid, $hash);

      //Values
    $reference = null;
    $pesapal_tracking_id = null;

    if(!empty($this->input->get('pesapal_merchant_reference', TRUE))) {

      $reference = $this->input->get('pesapal_merchant_reference', TRUE);
    }

    if(!empty($this->input->get('pesapal_transaction_tracking_id', TRUE))){

      $pesapal_tracking_id = $this->input->get('pesapal_transaction_tracking_id', TRUE);
    }

    //store $pesapal_tracking_id in your database against the order with orderid = $reference
    $payment_status = array(
      'reference_code' =>$reference,
      'tracking_id' =>$pesapal_tracking_id,
      'txn_date' => date('Y-m-d, H:i:s'),
      'txn_status' =>'WAITING',
      'invoiceid' => $invoiceid,
      'amount' => $this->session->userdata('pesapal_total')
    );

    $pesapal_txn_count = total_rows(db_prefix() . 'pesapal_txn', array('reference_code' =>$reference));

    //Insert
    $insert_id = false;
    if($pesapal_txn_count == 0){
      $insert_id = $this->db->insert(db_prefix() . 'pesapal_txn', $payment_status);
    }

    if ($insert_id && !is_null($pesapal_tracking_id)) {
        set_alert('success', _l('online_payment_recorded_success'));
      } else {
        set_alert('danger', _l('online_payment_recorded_success_fail_database'));
      }

  $this->session->unset_userdata('pesapal_total');
  redirect(site_url('invoice/' . $invoiceid . '/' . $hash));
}

public function failure()
{
  $invoiceid = $this->input->get('invoiceid', TRUE);
  $hash      = $this->input->get('hash', TRUE);

  check_invoice_restrictions($invoiceid, $hash);
  $this->load->model('invoices_model');
  $invoice = $this->invoices_model->get($this->input->get('invoiceid', TRUE));
  load_client_language($invoice->clientid);

  $hashInfo = $this->payu_money_gateway->get_valid_hash($_POST);

  if (!$hashInfo) {
    set_alert('warning', _l('invalid_transaction'));
  } else {
    if ($hashInfo['unmappedstatus'] != 'userCancelled') {
      set_alert('warning', $hashInfo['error_Message'] . ' - ' . $hashInfo['status']);
    }
  }

  $this->session->unset_userdata('payu_money_total');

  redirect(site_url('invoice/' . $invoiceid . '/' . $hash));
}
}