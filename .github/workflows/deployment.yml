name: 🚀 Deploy to CPANEL via GitHub SSH

on:
  push:
    branches:
      - staging
      - development
      - auto-update

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CPANEL_SSH_PRIVATE_KEY }}" > ~/.ssh/github_deployment
          chmod 600 ~/.ssh/github_deployment
          ssh-keyscan -H ${{ secrets.CPANEL_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        run: |
          ssh -i ~/.ssh/github_deployment -o StrictHostKeyChecking=no ${{ secrets.CPANEL_SSH_USER }}@${{ secrets.CPANEL_SSH_HOST }} << 'EOF'
            # Extract branch name from GitHub reference
            BRANCH_NAME=$(basename ${{ github.ref }})

            # Determine target folder based on branch
            case "$BRANCH_NAME" in
              "staging") DEPLOY_DIR="staging.tagrit.com" ;;
              "development") DEPLOY_DIR="dev.tagrit.com" ;;
              "auto-update") DEPLOY_DIR="autoupdate.tagrit.com" ;;
              *) echo "Branch not recognized. Exiting..."; exit 1 ;;
            esac

            echo "🚀 Deploying branch '$BRANCH_NAME' to $DEPLOY_DIR"

            # Navigate to the correct directory
            cd ~/$DEPLOY_DIR || { echo "❌ Deployment directory not found!"; exit 1; }

            # Ensure Git uses SSH instead of HTTPS
            git remote set-url origin git@github.com:tagrit/tagrit.git

            # Fetch latest changes and reset local state
            git fetch --all
            git reset --hard origin/$BRANCH_NAME
            git pull origin $BRANCH_NAME --rebase --force

            echo "✅ Deployment to $DEPLOY_DIR completed successfully!"
          EOF
