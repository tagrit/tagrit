name: üöÄ Deploy to CPANEL  & DigitalOcean

on:
  push:
    branches:
      - master
      - staging
      - development
      - auto-update

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH Keys
        run: |
          mkdir -p ~/.ssh

          # üîë Add CPANEL Private Key
          echo "${{ secrets.CPANEL_SSH_PRIVATE_KEY }}" > ~/.ssh/cpanel_key
          chmod 600 ~/.ssh/cpanel_key

          # üîë Add DigitalOcean Private Key
          echo "${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}" > ~/.ssh/digitalocean_key
          chmod 600 ~/.ssh/digitalocean_key

          # üñ•Ô∏è Add known hosts
          ssh-keyscan -H ${{ secrets.CPANEL_SSH_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.DIGITALOCEAN_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          echo "üîç Testing SSH Connection..."
          ssh -i ~/.ssh/cpanel_key -o StrictHostKeyChecking=no ${{ secrets.CPANEL_SSH_USER }}@${{ secrets.CPANEL_SSH_HOST }} "echo '‚úÖ CPANEL SSH connection successful'"
          ssh -i ~/.ssh/digitalocean_key -o StrictHostKeyChecking=no ${{ secrets.DIGITALOCEAN_SSH_USER }}@${{ secrets.DIGITALOCEAN_SSH_HOST }} "echo '‚úÖ DigitalOcean SSH connection successful'"

      - name: Deploy to CPANEL (Staging/Development/Auto-Update)
        if: github.ref != 'refs/heads/master'
        run: |
          ssh -i ~/.ssh/cpanel_key -o StrictHostKeyChecking=no ${{ secrets.CPANEL_SSH_USER }}@${{ secrets.CPANEL_SSH_HOST }} << 'EOF'
            BRANCH_NAME="${{ github.ref_name }}"

            case "$BRANCH_NAME" in
              "staging") DEPLOY_DIR="staging.tagrit.com" ;;
              "development") DEPLOY_DIR="dev.tagrit.com" ;;
              "auto-update") DEPLOY_DIR="autoupdate.tagrit.com" ;;
              *) echo "‚ùå Branch not recognized. Exiting..."; exit 1 ;;
            esac

            echo "üöÄ Deploying branch '$BRANCH_NAME' to $DEPLOY_DIR"

            cd ~/$DEPLOY_DIR || { echo "‚ùå Deployment directory not found!"; exit 1; }

            # Configure Git and GET Changes with a CI/CD user identity
            git config --global user.email "kevinamayi20@gmail.com"
            git config --global user.name "KEVINAMAYI"
            git remote set-url origin https://${{ secrets.USER_TOKEN }}@github.com/tagrit/tagrit.git
            git add .
            git commit -m "Auto-commit before reset on $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
            git fetch --all
            git reset --hard origin/$BRANCH_NAME
            git pull origin $BRANCH_NAME --rebase --force

            # Install dependencies,Ensure the correct PHP version is used
            PHP_BIN="/opt/cpanel/ea-php82/root/usr/bin/php"

            # Install dependencies using PHP 8.2
            echo "üì¶ Running composer install with PHP 8.2..."
            $PHP_BIN $(which composer) composer install --no-dev --optimize-autoloader

            echo "‚úÖ Deployment to $DEPLOY_DIR completed successfully!"
          EOF

      - name: Deploy to DigitalOcean (Master Branch)
        if: github.ref == 'refs/heads/master'
        run: |
          ssh -i ~/.ssh/digitalocean_key -o StrictHostKeyChecking=no ${{ secrets.DIGITALOCEAN_SSH_USER }}@${{ secrets.DIGITALOCEAN_SSH_HOST }} << 'EOF'
            echo "üöÄ Deploying master branch to DigitalOcean"

            # Navigate to the correct directory
            cd /var/www/html/tagrit || { echo "‚ùå Deployment directory not found!"; exit 1; }

            # Configure Git and GET Changes with a CI/CD user identity
            git config --global user.email "kevinamayi20@gmail.com"
            git config --global user.name "KEVINAMAYI"
            git remote set-url origin https://${{ secrets.USER_TOKEN }}@github.com/tagrit/tagrit.git
            git add .
            git commit -m "Auto-commit before reset on $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
            git fetch --all
            git reset --hard origin/master
            git pull origin master --rebase --force

            # Install dependencies
            echo "üì¶ Running composer install..."
            composer install --no-dev --optimize-autoloader

            echo "‚úÖ Deployment to DigitalOcean completed successfully!"
          EOF
